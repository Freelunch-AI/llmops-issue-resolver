name: Check main version and bump main version if necessary

on:
  pull_request:
    types:
      - opened
      - reopened
    branches:
      - release

jobs:
  check-version:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install gh cli
        uses: ksivamuthu/actions-setup-gh-cli@3

      - name: Get current version from release branch
        id: get-release-version
        run: |
          git fetch origin release:release
          git checkout release
          RELEASE_VERSION=$(grep '^version =' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "RELEASE_VERSION"
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV

      - name: Get version from main branch
        id: get-main-version
        run: |
          git fetch origin main:main
          git checkout main
          MAIN_VERSION=$(grep '^version =' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "MAIN_VERSION=$MAIN_VERSION" >> $GITHUB_ENV

      - name: Compare versions
        id: compare-versions
        run: |
          if [ "$MAIN_VERSION" == "$RELEASE_VERSION" ] || [ "$(printf '%s\n' "$MAIN_VERSION" "$RELEASE_VERSION" | sort -V | head -n1)" = "$MAIN_VERSION" ]; then
            echo "Main branch version ($MAIN_VERSION) is not higher than release branch version ($RELEASE_VERSION). Pull request is not allowed"
            echo "PR_ALLOWED=0" >> $GITHUB_OUTPUT
          else
            echo "Main branch version ($MAIN_VERSION) is higher than release branch version ($RELEASE_VERSION). Pull request is allowed"
            echo "PR_ALLOWED=1" >> $GITHUB_OUTPUT
          fi

      - name: Bump main version to be one higher than release version
        id: bump-version
        if: ${{ steps.compare-versions.outputs.PR_ALLOWED == '0' }}
        run: |
          export RELEASE_VERSION_PLUS_ONE=$(echo $RELEASE_VERSION | awk -F. -v OFS=. '{$NF++; print}')
          sed -i "s/version = \"$MAIN_VERSION\"/version = \"$RELEASE_VERSION_PLUS_ONE\"/" pyproject.toml
          echo "MAIN_VERSION=$MAIN_VERSION" >> $GITHUB_OUTPUT
          echo "RELEASE_VERSION_PLUS_ONE=$RELEASE_VERSION_PLUS_ONE" >> $GITHUB_OUTPUT

      - name: Get PR number, title and body
        id: get-pr-info
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
        run: |
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV
          echo "PR_BODY=$PR_BODY" >> $GITHUB_ENV

      - name: Stash changes, create patch branch, commit the changes to it, push & make a PR
        uses: peter-evans/create-pull-request@v7
        env:
          REPOSITORY_NAME: ${{ github.repository }}
          COMMIT_MESSAGE: Bumping main version to one above release branch version (because it was equal or lower), bumping from ${{ steps.bump-version.outputs.MAIN_VERSION }} to ${{ steps.bump-version.outputs.RELEASE_VERSION_PLUS_ONE}}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: ${{ env.COMMIT_MESSAGE }}
          author: github-actions <ceo@freelunch.com>
          title: "[Version Bumped] ${{ steps.get-pr-info.outputs.PR_TITLE }}"
          body: "[Version Bumped] ${{ steps.get-pr-info.outputs.PR_BODY }}"   
          branch: patch/version-bumping
          sign-commits: true
      
      - name: Close previous PR
        env:
          PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh pr close --comment "Auto-closing pull request -> a version bumped pull request was made on top of your changes" --delete-branch $PULL_REQUEST_NUMBER
         
      # - name: Set status check
      #   if: ${{ steps.compare-versions.outputs.PR_ALLOWED == '0' }}
      #   run: exit 1
